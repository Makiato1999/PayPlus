<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.payplus.dao.IOrderDao">
    <resultMap id="dataMap" type="com.payplus.domain.po.PayOrder">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="user_id" property="productId"/>
        <result column="product_name" property="productName"/>
        <result column="order_id" property="orderId"/>
        <result column="order_time" property="orderTime"/>
        <result column="total_amount" property="orderTime"/>
        <result column="status" property="status"/>
        <result column="pay_url" property="payUrl"/>
        <result column="pay_time" property="payTime"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>

    <insert id="insert" parameterType="com.payplus.domain.po.PayOrder">
        insert into pay_order(user_id, product_id, product_name, order_id, order_time,
                              total_amount, status, create_time, update_time)
        values(#{userId}, #{productId}, #{productName}, #{orderId}, #{orderTime},
               #{totalAmount}, #{status}, now(), now())
    </insert>

    <select id="queryUnpaidOrder" parameterType="com.payplus.domain.po.PayOrder" resultMap="dataMap">
        select product_id, product_name, order_id, order_time, total_amount, status, pay_url
        from pay_order
        where user_id = #{userId} and product_id = #{productId}
        order by id desc
        limit 1
    </select>

    <!--
    update 语句不会返回数据，而只是更新数据库中的数据，所以不需要映射到 Java 对象。
    只需要 parameterType="com.payplus.domain.po.PayOrder" 来绑定参数，无需 resultMap。
    -->
    <update id="updateOrderPayInfo" parameterType="com.payplus.domain.po.PayOrder">
        update pay_order set pay_url = #{payUrl}, status = #{status}, update_time = now()
        where order_id = #{orderId}
    </update>

    <update id="changeOrderPaySuccess" parameterType="com.payplus.domain.po.PayOrder">
        update pay_order set status = #{status}, pay_time = now(), update_time = now()
        where order_id = #{orderId}
    </update>

    <update id="changeOrderClose" parameterType="java.lang.String">
        update pay_order set status = 'CLOSE', pay_time = now(), update_time = now()
        where order_id = #{orderId}
    </update>

    <!--
    目标：查询超过 30 分钟未支付的订单，通常用于 订单自动取消

    -->
    <select id="queryTimeoutCloseOrderList" parameterType="com.payplus.domain.po.PayOrder">
        select order_id as orderId from pay_order
        where status = 'PAY_WAIT' AND NOW() >= order_time + INTERVAL 30 MINUTE
        ORDER BY id Asc
        LIMIT 50
    </select>

    <!--
    目标：查询超过 1 分钟未支付的订单，通常用于 支付提醒
    这个查询一般是 定时任务（Scheduled Task） 或 轮询任务（Polling Job），会不断执行
    订单支付超时处理
    这个 SQL 通常用于 检查未支付的超时订单，然后进行关闭或提醒：
       1. 定时任务（定期执行）
       比如 每 10 秒、30 秒、1 分钟 执行一次，检查哪些订单超时。
       2. 轮询任务（间歇性查询）
       由后台服务每隔一段时间运行一次，主动检查超时订单。
    -->
    <select id="queryNoPayNotifyOrder" parameterType="com.payplus.domain.po.PayOrder">
        select order_id as orderId from pay_order
        where status = 'PAY_WAIT' AND now() >= order_time + INTERVAL 1 MINUTE
        ORDER BY id Asc
        LIMIT 10
    </select>

</mapper>